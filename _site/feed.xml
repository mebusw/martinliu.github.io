<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Martin's Blog</title>
    <description>DevOps Coach &amp; Cloud Expert!</description>
    <link>http://localhost:4000</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Nutanix AHV 虚拟机模板制作</title>
        <description>
          本文描述了AHV虚拟化的虚拟机模板的制作过程。 - 
          首先使用ssh登录cvm，进入acropolis命令行。 找出模板对应的虚拟机 使用 vm.disk_get 命令，按多次tab，显示虚拟机清单，复制模板机名称 &amp;lt;acropolis&amp;gt; vm.disk_get vm-fedora25 ide.0 { addr { bus: &quot;ide&quot; index: 0 } cdrom: True empty: True } scsi.0 { addr { bus: &quot;scsi&quot; index: 0 } container_id: 4427 container_uuid: &quot;9279ba2c-8e8d-4aea-b00f-410df5a18a23&quot; vmdisk_size: 10737418240 vmdisk_uuid: &quot;7476458e-7917-4df8-b830-a0df5a95dae9&quot; } 创建模板镜像 使用从虚拟机磁盘克隆出镜像的命令。 &amp;lt;acropolis&amp;gt; image.create fedora25-Template clone_from_vmdisk=7476458e-7917-4df8-b830-a0df5a95dae9 image_type=kDiskImage annotation='Fedora 25 Server...
        </description>
        <pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2017-01-10-clone-ahv-vm-template/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-01-10-clone-ahv-vm-template/</guid>
      </item>
    
      <item>
        <title>Nutanix资源站点清单</title>
        <description>
          做Nutanix的那些不可不知道的资源网站 - 
          这里列出了常用的官方和非官方网站。 Nutanix 官方站点 http://portal.nutanix.com/ http://portal.nutanix.com/ 在线文档 在线技术支持，case查看和操作 产品和补丁下载 https://next.nutanix.com/ https://next.nutanix.com/ 产品网上论坛和社区 社区版论坛 博客， Nutanix Connect Blog 技术达人网站和博客 myvirtualcloud.net by Andre Leibovici http://myvirtualcloud.net/nutanix/ Virtual life style by Joep Piscaer https://www.virtuallifestyle.nl/ The Nutanix Bible by Steven Poitras http://nutanixbible.com/ Mark’s Blog by Mark Lavi http://mlavi.github.io/ Jeremy Sallee - Nutanix UI/Frontend 设计师 http://salleedesign.com/stuff/sdwip/home/ 想知道Prism是怎么设计出来的：点这里...
        </description>
        <pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2017-01-07-nutanix-resource-sites/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-01-07-nutanix-resource-sites/</guid>
      </item>
    
      <item>
        <title>DevOps术语表</title>
        <description>
          关键术语快速查询 - 
          本术语表主要来源于DevOps相关书籍。 英文 中文 artifacts 部署包 Telemetry 告警数据 process time 处理时间 cycle time 周期时间 tightly-coupled 紧耦合 monolithic applications 单体应用 lead time 前置时间 developer 开发人员 Exploratory test 探索测试 batch sizes 批次尺寸 Affinity 亲和 Agile 敏捷 Application Deployment 应用部署 Artifact Management 构件库管理 Automation 自动化 Blamelessness 免责 Cloud Computing 云计算 Collaboration 协作 Configuration Management...
        </description>
        <pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2017-01-07-devops-glossary/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-01-07-devops-glossary/</guid>
      </item>
    
      <item>
        <title>云计算时代的终结</title>
        <description>
          什么还没有开始就已经结束了 - 
          天下事分久必合，合久必分，移动互联网代表了现在的云计算时代，很多企业还正在朝这个方向发展呢！革命还没有成功，怎么这个时代就要结束了。来听听XenSource前CEO怎么给你解读边缘计算时代的到来。 “I’m going to take you out to the edge to show you what the future looks like.” So begins a16z partner Peter Levine as he takes us on a “crazy” tour of the history and future of cloud computing — from the constant turns between centralized to distributed computing,...
        </description>
        <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2017-01-05-The-End-of-Cloud-Computing/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-01-05-The-End-of-Cloud-Computing/</guid>
      </item>
    
      <item>
        <title>Nutanix AOS 5.0 新版本新特性</title>
        <description>
          新看点快速一览 - 
          Nutanix AOS 5.0 是一个很重要的功能更新大版本，它一气儿带来了46项之多的新功能；在您安装或者测试这个版本&amp;gt; 之前，先通过本文快速了解一下这些更新，可能是更加节省时间的方法。 主要功能清单 myvirtualcloud.net网站用了4个blog，讲了下面的36项新特性： Cisco UCS B-Series Blade Servers Support Acropolis Affinity and Anti-affinity Acropolis Dynamic Scheduling (DRS++) REST API 2.0 and 3.0 Support for XenServer TechPreview Network Visualization What-if analysis for New workloads and Allocation-based forecasting Native Self-Service Portal Snapshots – Self Service Restore UI Network...
        </description>
        <pubDate>Wed, 04 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2017-01-04-Nutanix-AOS-5.0/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-01-04-Nutanix-AOS-5.0/</guid>
      </item>
    
      <item>
        <title>来自于《DevOps Handbook》的书单</title>
        <description>
          本清单来自于《DevOps Handbook》书中提到的书，更新到第五本 - 
          《看板方法》、《精益思想》、《Implementing Lean Software Development: From Concept to Cash》、《第五项修炼:学习型组织的艺术与实践》、《探索吧!深入理解探索式软件测试》 《看板方法-科技企業漸進變革成功之道》 转自： Rubbyblog.wordpress.com 今天要介紹看板方法的由來， 上面這本書是由看板方法之父 David J. Anderson 於: 2010年 4月所著。簡字版是 2014 年2月出版。這篇文章在我上 TechDays 課程時就想登出來了，想把好書介紹給大家。但由於台灣的書商都沒有進口，所以一直等到我拿到第一批書後，肯定大家可以在坊間買到書時才把他登出來。原文書名: Kanban: Successful Evolutionary Change for Your Technology Business. 看板方法：它是敏捷陣營中實施起來阻力最小，生產力又能大幅提升、前置時間大幅下降，而可預測性又絕佳的敏捷解決方案之一。好神奇喔 … 哈哈! 確實如此，所以我才會這麼急切的推薦給大家。另一個原因是Kanban Method 現在在美國正熱烈風行中，而我們現在開始追正是時候。為此放下了許多手上正在做的工作(包括一本 Scrum的教本)，努力開始推廣希望大家能受用。首先說明: 為何他推廣起來阻力最小? ※ 實施起來阻力最小: 因為David J. Anderson 本身是一個微軟的 PM出身，他跟大家一樣知道變革會讓許多人害怕，人們會認為自己的技術是否落伍了，開始擔心害怕變革會對自己的工作事業帶來不利，這種恐懼常常會帶來一種莫名的對立，因此在還沒開始變革之前就已經採取抵制的態度了。所以他創始的看板方法選擇從哪裡開始實施呢? 就從現在既有的流程開始。由工作者本身最熟悉的地方開始。起步的秘訣是甚麼呢? 是精實精神中從豐田系統中學來的原則，先從不浪費開始，作法: 在識別浪費後消除浪費。 ※...
        </description>
        <pubDate>Tue, 03 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2017-01-03-devops-booklist/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-01-03-devops-booklist/</guid>
      </item>
    
      <item>
        <title>HPE 分兵两路进军超融合市场</title>
        <description>
          关于HP超融合产品家族的变迁简史和相关评论，本文转自 HC 250? HC 380? What are they actually for?。 - 
          转帖：《HC 250? HC 380? What are they actually for?》 http://www.theregister.co.uk/2016/12/05/the_state_of_hpes_hyperconverged_play/ HP/HPE 超融合产品线发展如下图所示 +Comment The positioning of these two hyper-converged systems is confusing. We observe that the physically larger and vSphere-only HC 380, with its brand number larger than the HC 250, is for use by operators requiring operational simplicity, whereas...
        </description>
        <pubDate>Tue, 03 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2017-01-03-HPE-%E5%88%86%E5%85%B5%E4%B8%A4%E8%B7%AF%E8%BF%9B%E5%86%9B%E8%B6%85%E8%9E%8D%E5%90%88%E5%B8%82%E5%9C%BA/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-01-03-HPE-%E5%88%86%E5%85%B5%E4%B8%A4%E8%B7%AF%E8%BF%9B%E5%86%9B%E8%B6%85%E8%9E%8D%E5%90%88%E5%B8%82%E5%9C%BA/</guid>
      </item>
    
      <item>
        <title>Nutanix CE All In One</title>
        <description>
          关于路坦力社区版软件一贴搞定 - 
          Nutanix CE是Nutanix社区版软件的简称，它是Nutanix企业版产品的功能精简集合，是体验和测试Nutanix技术的很方便的途径。 Nutanix Community Edition 社区版简介 这个产品目前的位置在 https://www.nutanix.com/products/community-edition/；目前这个页面还没有中文化，下面简单介绍以下。 Feature Rich Software 它是一个功能丰富的软件 Broad Hardware Support &amp;amp; Available On-demand 很丰富的硬件支持，在网上可以按需体验 Zero Cost 零成本 用Nutanix CE社区版体验，体验超融合技术的三个步骤。 注册 ： 这次Nutanix社区，下载安装镜像 部署 ： 在你的服务器上部署，或者在Ravello上在线开启体验；官方安装部署视频点这里 玩耍 ： 安装完之后就可以开心地玩耍了，有问题请移步 社区版论坛 用物理机安装和体验的几点注意事项如下： 物理机安装支持1，3，4个节点的部署；推荐内存在32GB以上；由于版本CE 2016.12.22的CVM的内存需求是24GB，由于加入了自服务门户功能；建议使用SSD硬盘，最好能混搭一些普通硬盘。 安装后的首次启动需要系统能链接互联网，否则CVM会启动不了，首次启动成功之后就不用再联网了 用虚拟机安装，请注意本机的内存，和给虚拟机分配的内存，网上也有修改对内存和CPU限制修改的脚本 产品在社区里的文档页面： 点这里 参考配置 Intel NUC 最新版一台，i7处理器，两条16GB内存，两条512GB硬盘。它的好处是便携；然而内存还是有限，不能跑多少个虚拟机。 相关文档 在VMware Workstation上安装Nutanix CE Nutanix...
        </description>
        <pubDate>Mon, 02 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2017-01-02-Nutanix-CE-all-in-one/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-01-02-Nutanix-CE-all-in-one/</guid>
      </item>
    
      <item>
        <title>美国西岸旧金山之行</title>
        <description>
          硅谷和旧金山周边游 - 
          这次旅行的目的地是硅谷腹地圣何塞，属于商务出差，周末在旧金山简单游玩了一下。

交通
从北京到硅谷（圣何塞）有了海航直飞的飞机还是很方便的，在淡季的时候票价也不错。如果你的目的地就在圣何塞市附近的话，乘坐这个航班无疑是最佳的选择。



我是星期天从北京出发的，飞机经过了11个多小时的飞行后，抵达圣何塞的时间是：同一天的上午。由于机场离我住的酒店太近了，我就经历了人生第一次，从机场走路去酒店入住。

我在圣何塞待了大约5天，公司和酒店离的非常近，而且公司每天的餐食足够让人忘记去找饭馆吃饭这回事，这也是我首次出差这么不计较吃饭这回事。

值得一提的是，一天和一位华人同事聊天，得知他家附近有OUTLETS，当时就说您那天下班回家，求顺道带去。第二天我如约坐上了这位同事的宝马和他一同经历了一次，硅谷人的下班。没想到的不到五点，在从圣何塞去往东湾的路上就非常的堵了，正常情况下40分钟的路程走了快两个小时。不过好在我近半年多创业公司的经理起了大用处，有很多谈资，对于这位硅谷的资深前辈来说也非常有兴趣。

乘坐Uber替代租车是我本次出行最明智的选择，Uber选择拼车，如果和您同程的话，交通费用会非常的便宜。我的几次必要的打车经历都是用Uber解决的。只是最后一天回家的时候，到时出了状况，由于前一天晚上Uber升级，导致需要密码登录，而我的那个备用手机又没有带，最后只能请房东打了一辆正常的Yellow CAB出租车。



乘坐Uber从圣何塞到旧金山市区的那一趟，让我在周五的下午再次领略了硅谷的堵车，足足走了3个多小时。从此我再也不觉得帝都是世界上唯一的堵车严重的城市了。



我在旧金山期间的交通是乘坐公交电车，价格便宜又方便；不过也部分依靠了这个红色旅游巴士，两天45刀的价格倒也不便宜；买票的原因主要是，当我暴走至金门大桥的北岸的时候，觉得好像再也不能走回头路，而且附近并没有方便的公共交通工具。因此就上车了，不过对于第一天的市区游也是增色不少，一下子就让我对三藩市的整个情况摸了个七七八八，对第二天的行程非常有帮助。



上图就是三藩市有名的叮当单车，其实就是有轨电车，由于保留了怀旧的车厢，因此一下子就成为了一个游客必选的项目。如果不是我买了CITY TOUR的票，我肯定也会去体验一把。

公司
Nutanix是我工作十几年来所加入的一家最年轻的公司，这家公司在16年9月刚刚IPO，公司只有六七年的时间，超融合架构这块独特的市场空间可以说是他们创造的。



公司目前还在一栋很平常的办公楼中，由于人员扩张的比较快，左侧的那栋楼也几层入住了。公司的文化还保留了比较浓的创业公司的气质，这么说是由于，公司的中高层大部分已经被来自于：VMWare、EMC、NetApp、Dell、HP等大公司的职业经理人们占据了，公司的执行层面上是不折不扣的职业经理人负责的路线，几天的培训下来，感觉所有的人都赶紧十足，大家对市场和机遇的感受和我们之前经历的所有公司都是不同的。很多本次一起来的同事中，有的是已经有一两年的Nutanix产品经验的，有的已经入职了半年左右的；相比之下我是第二周上班的新丁，在几天的培训过程中，我也是只有沉默的份。


两个大冰箱，左边其实还有一个冰箱一个冰柜，里面都是各种饮料和食品。

这些小货架上是零食和水果。这间屋子有人搭理，会及时补充缺少了的食品。这几天的培训管两餐，在加上这些零食和补给，基本上晚餐不吃也行了。到下班的时候，可以看见有人在这些货架和冰箱里自然地往背包里装东西，后来的两天里面我晚餐基本没有出去，和很快学会这种行为也很有关，晚餐不吃的另外一个原因是时差。这次我经理了前所未有的严重的时差，几乎每天下午6点左右就困得快要昏倒，到凌晨3点左右肯定是清醒的。当然这些食品肯定比不上一线的互联网公司，可是也基本上赶超了我之前所经理过的所有的传统公司的情况。工作相关的内容就此打住。

游玩

我住在了教会区的一个非常安静的民宅里面，是租的Airbnb的房间。房间的外形如下所示。



家里也非常整洁、宽敞和温馨。这家附近有公交车，30分钟可以到达渔人码头所在的北滩。我第一天的路线基本上是从渔人码头沿着海边不行到进门桥下，上桥，从桥上不行到桥的北岸，最CITY TOUR红色双层BUS，回城区，然后横穿过金门公园内部的一部分，在回到联合广场。之后我有步行到了三藩市的China Town吃饭。一天的暴走下来，其实对这个城市的感觉还是非常不错的。有几个可圈可点之处：


  特色景点比较多，这里不一一枚举，都是大家耳熟能详的
  城市地形高低起伏，建筑物各具特色，错落有致，绝无前篇一律的感觉。
  城市的色彩丰富，特别是那些个精彩的墙壁彩绘


金门大桥

随拍的几张图片如下。







慕名上桥走一圈的游客还是蛮多的。距离对于我这样的暴走一组来说，也没啥强度。可以感谢的是苍天有眼，让我在这抑郁、寒冷的冬季，让我待了一周已经对天气绝望的心境再次激活。后来要走的几天里，天天是艳阳高照万里无云。

其他景点

渔老人码头比我想象中的小，而且由于并非捕鱼的季节，有赶上是寒冷的冬天，真的也就是觉得是到此一游，没有看到什么特殊的地方。


China Town的墙壁彩绘，不像是人随手为之，而这样质量的墙壁彩绘在三藩市还有很多很多。



金门公园是我这个跑步爱好者的毕竟之地，由于本次身体状态不佳，没有跑在这个公园里面；而是从东门到西门的暴走了一趟。公园的面积其实和纽约的中央公园差不多，也就是从东到西大约5公里左右。

公园里面被分成了很多不同的区域，正值周末各种狗友、航模、跑步、飞碟、航模等等的爱好者聚集在自己的区域里面消遣着周末时光。



走到了三藩市西侧的海边，面朝大海的位置离注明的悬崖屋餐厅不远，我可以清晰的看到那个餐厅的建筑物。



斯坦福
对于我来说各个著名的大学有很深的吸引力，想想这所大学和硅谷的IT行业是有多麽重要和紧密的联系。



上图是校园里著名的教堂，是一座美丽而古典的建筑，是校园的心脏。来这里游览应该从南边的正面进入，直接走到这个教堂，然后在看其他的部分。

美食

酸面包算是渔人码头景点的美食之一，性价比很高。


面包产自下面这家店。


最后的一次正餐，选择了北滩海景叫做Dinner的餐厅，主要吃个海景；餐食炸鱼陪薯条。


压轴的是这个早餐，点名叫“8 AM”；三藩市早餐分类在点评网站上排第五。吐司三吃。



        </description>
        <pubDate>Sat, 31 Dec 2016 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/2016-12-31-west-coast-SFO/</link>
        <guid isPermaLink="true">http://localhost:4000/2016-12-31-west-coast-SFO/</guid>
      </item>
    
      <item>
        <title>EXIN DevOps Master 认证考试</title>
        <description>
          
          DevOps这个词在去年参加红帽全球用户大会的时候就深深吸引了我，实际上哪个会上Docker容器的概念要比DevOps还火爆。Docker／openshift相关的session都尝尝是爆满的。从那里开始我逐渐感觉到了开源容器技术的强大和吸引力。

从红帽开始OpenShift的考试就是我在完成RHCA红帽认证架构师之后的一个心结，至今也没有完成。不过这根草我早晚是要拔掉的。主要是由于OpenShift是Docker ＋ kubernetes 的组合；是如今企业级PaaS容器平台的主要技术路线。总之离开红帽是如此的仓促，说实话这也是我职业生涯中的一个不小的遗憾。当时确实觉得 kubernetes 的命令行操作不是很方便，而且在OpenShift并没有降低这个门槛，也即是说在OpenShift里面还是要有一定的工作量和技能的要求在编写kubernetes的yml文件上。在这一点上，及时我熟练掌握了Rancher之后，同样发现编写compose file也是难以逃避的。在推广一步，大部分Docker PaaS平台也都是这样，很多产品也是在界面上提供一个文本输入框，让人输入容器服务定义文件的内容。

在最近的半年中，我的所有技术研究都集中在Docker和其服务编排技术上。与很多用户做过技术交流，PoC测试，有些单子也落地。总结后，有些结果让我感叹。国内的所有企业不区分规模和行业，其实他们对国内原生的创业公司是欢迎的，由于这些公司提供的是国产软件和技术服务。在Docker这个火热的领域中，已经有20多家国内创业公司，我想所有的公司也都已经接受到了这一点的福利了。外国软件通常给人的感觉是：不是国产软件（不要小看国内公司对国产软件的诉求），纯英文操作界面和文档，可能的水土不服，高昂的软件价格和服务费，如果技术太新的化很可能厂商也不具备足够的技术实力和服务力量。

经过了一些Docker容器项目之后，可以断言的是容器市场的火爆和它的技术优势是直接相关的。容器化之后的应用可以通过服务编排工具快速地部署／更新、弹性地伸缩和使用资源，优化其传统应用运维的若干缺陷。容器的轻量和just enough的隔离技术让资源池的管理更加简单，利用率大幅度提升，这对研发部门的环境管理是不小的提升，使CI的过程更加高效和经济。Docker对微服务的支持也深深地诱惑了所有开发者，做系统微服务实施开发者能想到的实施技术大多数会是容器。

以上容器的优势和特性使得国内的这些项目落地和实施的可能性进一步提高，甚至很多项目的速度远远超预期；按照我多年的经验看，一个软件技术型的项目，用户纠结半年到一年以上是很正常的。可能也跟国内企业包容本土化软件公司，追捧新潮技术直接相关；我观察到的一些项目，在2～4个月内落单的屡见不鲜。有些试点的DevOps咨询项目也落地很快。

这些项目都殊途同归地指向了DevOps这个关键词，这让我不得不从去年开始就关注和学习这个最佳实践。当然，我对DevOps的前途非常看好，因此当我听说业内出现了相关认证考试之后，我毫不犹豫地报名参加了。经过2个多月的缜密的准备，我终于幸运地一次通过了这个考试。考试获得了两个证书。

[caption id=”attachment_54191” align=”alignnone” width=”500”] DevOps Master[/caption]

[caption id=”attachment_54190” align=”alignnone” width=”500”] DevOps Master 认证自由讲师[/caption]

我参加的是讲师认证培训TTT，很高兴能成为Exin在国内的首批5个认证人员之一。在准备这个考试的过程中我学习了一些书籍，现在还在深度学习的书有两本。



我完成了这本黑皮书的读书笔记，很遗憾的是，我发现它的最新版，把封面改成了白底的了，我不能在叫它黑皮书／黑宝书了。这本书我起码看了两遍；目前正在调试它的书中的代码，代码中的营养还是很高的，计划尽快把所有代码调试通过；从而完成我许下多次的线上分享本书的诺言。



这本书被我称为CD红皮书／红宝书。本书早在10年就出版了，也就是说比Docker早好多年。他给我最大的印象就是，作者每一页上似乎都在介绍这做事情的原则和规矩是什么？我一点也不夸张，他对CD的介绍，就是通过讲解一系列在项目上的经验总结。对作者这种级别的经验，和写书的房子只能用一个词总结“服”。这本书太干，我至今还没有消化完。他让我看到了解决发布和变更风险的终极解决方案，没有一次性解决问题的部署／配置／发布工具，有的是历练和打磨了千万次的持续部署流水线；隐约地觉得没用入手的企业都会慢慢跟上的。

以上是我对DevOps的阶段性总结，跨度有半年之久。这半年中我逐渐看清了我的主要兴趣点，抛除所有其他主题，目前剩下的就是：云计算和DevOps。一方面觉得年纪不饶人，不能可能在和年轻人拼精力、体力和创意；我的背景和经验都让我感觉，在这两个话题上，我还是有很多年的经验和技术积累和总结的。云计算是（公有云＋私有云）未来企业IT基础架构的走向；DevOps是目前看比较正确的运作实践。一个便技术，一个便管理，正好完整覆盖了我的经验；在其对应的开源技术这个分支里，我想它们都还有这很多的为探索和研究的项目。




        </description>
        <pubDate>Mon, 07 Nov 2016 15:19:08 +0000</pubDate>
        <link>http://localhost:4000/2016-11-07-exin-devops-master-e8-ae-a4-e8-af-81-e8-80-83-e8-af-95/</link>
        <guid isPermaLink="true">http://localhost:4000/2016-11-07-exin-devops-master-e8-ae-a4-e8-af-81-e8-80-83-e8-af-95/</guid>
      </item>
    
      <item>
        <title>DevOps 的起点-入手微型数据中心</title>
        <description>
          
          测试环境说明 我的笔记本电脑的环境描述如下。 OS MacBook Pro 2011 版， 2.3 GHz Intel Core i5， 8GB DDR3， 256 GB SSD。 OS X EI Capitan version 10.11.5 Docker Docker for Mac Version 1.12.0-rc2-beta17 (build: 9779) ` $ docker version Client: Version: 1.12.0-rc2 API version: 1.24 Go version: go1.6.2 Git commit: 906eacd Built: Fri Jun...
        </description>
        <pubDate>Fri, 01 Jul 2016 03:11:10 +0000</pubDate>
        <link>http://localhost:4000/2016-07-01-devops-in-a-box/</link>
        <guid isPermaLink="true">http://localhost:4000/2016-07-01-devops-in-a-box/</guid>
      </item>
    
      <item>
        <title>用 Docker 构建 Serverless 应用</title>
        <description>
          
          Martin解读Serverless Serverless 不意味着没有服务器，而是从应用可以在一个抽象层上忽略它的存在，而只关注在功能实现上和自身的请求处理上；每一个功能实现在不是单纯的业务逻辑处理的代码，相反每个功能调用具有了 server 的特质，进化成为了一个具有自省、自知和自治的工作负载单元；他们更像是能够衍生出其它新功能单元的生物体。这样整个 Serverless 应用架构之内，每个生命可以衍生下去，子子孙孙无穷匮也。 本文编译了：https://blog.docker.com/2016/06/building-serverless-apps-with-docker/ 一下是正文内容。 处在这技术日新月异的时代里，新的技术浪潮经常对当前的技术产生着威胁和颠覆。在编写应用的时候我们目前经常谈论到“Serverless”技术。它的核心思想是把应用作为一系列的功能/function来部署，这些功能在需要的时候被按需部署。服务器管理应该是不需要去操心的事情，所有功能被按需调用，被运行在群集之上。 但是 Serverless 里不意味着没有 Docker，事实上 ”Docker 就是 Serverless”。你可以用 Docker 来容器化这些功能，然后按需地运行在 Swarm 群集上。Serverless 是一种构建分布式计算的应用的方法，而 Docker 是完美的构建和运行他们的平台。 从** Server **到** Serverless** 那么我们如何来编写 Serverless 的应用？让我们先看下这个例子：“一个有5个子服务组成的投票应用”： 它的结构如下： 两个 web 前端 一个后台的处理投票的 worker 服务 一个处理投票的消息队列  一个数据库 那个后台处理投票的进程是非常容易成为转换为 Serverless 架构的目标。在投票应用内，我们可以运行一点类似于下面的代码，来执行后台任务： import dockerrun client = dockerrun.from_env() client.run(&quot;bfirsh/serverless-record-vote-task&quot;, [voter_id, vote],...
        </description>
        <pubDate>Wed, 22 Jun 2016 16:22:51 +0000</pubDate>
        <link>http://localhost:4000/2016-06-22-building-serverless-apps-docker/</link>
        <guid isPermaLink="true">http://localhost:4000/2016-06-22-building-serverless-apps-docker/</guid>
      </item>
    
      <item>
        <title>DockerCon 2016 D2 超萌码头酷黑客 大会圆满闭幕</title>
        <description>
          
          Closing General Session 的主题是 Moby Dock‘s Cool Hacks ； 从字面意思上看，这个主题的意思是“超萌码头酷黑客”的意思。我已经看到了关于最后一天开幕主题演讲的评论，说是“剑指商业”什么的；而我认为 Docker 从开始的第一天，无论它是否开源，它都是为了商业利益而已。话在说回到开源，Docker 只是完美的应用了开源软件这种实践而已；而且docker 把开源这种模式应用的如此成功，并在商业上也如此让人眼红和侧目，这也算是开源软件商业化登峰造极的一种极端性个案。个人认为开源无疑是在软件行业中做出爆款技术当之无愧的首选的实践方式。我在红帽碰到很多参与开源十几二十年的老黑客，他们不乏会表达关于开源纯洁性沦丧的抱怨；我对此也非常理解和认同。而我更认同开源可以对软件技术带来无比活力的这个积极的方面。 言归正传，小编我还是“模拟现场”播报一下大会闭幕主题演讲的盛况。这是大会的结束的 session，现场的人数明显的少于第一天开幕式的人。在十几分钟内，人们稀稀拉拉的进入了会场。会场中的座位大约还有一部分空位。美女Mano 和 黑客Kristie 作为主要演讲人上台。美女上台后先用手机自拍了几下。两个人开始宣布，Docker 大会之后举行为期一个月的黑客大赛，这是我们的传统，Docker 大会虽然今天会结束，而docer 黑客大赛将从今天开始。我们来请大家欣赏三个非常酷的黑客项目演示。 本次大会的录音点这里 http://www.ximalaya.com/32280565/sound/17388272 黑客演示1：微服务自毁平台 Jeff 登场。Jeff 开始讲述微服务的故事，我们都在试图让基础架构做到冗余，容所有的服务都冗余，让群集能够自愈；但是故障，断网，宕机还是会发生。我们所做的这些真的能够保证业务不宕机么，服务不终端么？你怎么能确认这一点？因此回归到故障的发生上吧？如果服务要出故障，请让它有规律的发生。请程序猿和 ops 都投入到故障处理的战斗中，以此为契机来优化和改造应用，让应用变的更加强壮。我们都听说过混乱猴子，而 Jeff 团队正式帮人们构建一堆这样的工具的人。 有一个思路是：如何让我的系统的服务出故障，如何主动的在系统中注入故障。我们需要一种特殊的编排工具来在系统中模拟和触发故障的发生。我用容器做工具平台来触发故障注入的动作。当然这个故障是在容器架构的微服务系统中触发这个动作。 Jeff 开始做这个 Demo。说：如果你的”网络没有故障，天下太平。“其实这很无聊的说，有木有？有木有？我现在开始用工具来注入 网络延迟的网络故障吧！ 。用一个基于策略的工具。配置一个网络故障模拟的策略，故障什么时间发生，发生多久。这里设计一个每10秒钟注入一次网络延迟故障提高到600ms 的故障。然后配置故障影响的范围，这里使用 Docker 的 lable 来做故障发生节点的选择的条件。符合标签的系统将受到这次故障影响。我们的这个故障模拟编排系统，帮您提前体验故障的发生。现在你看故障发生了，从这些容器里面 ping google 的网络延迟比之前大多了， 目前延迟到了600ms。希望你们能开始体验和使用这个而工具。 黑客演示2：Serverless 架构的应用不是梦 Ben 是大家在 Docker...
        </description>
        <pubDate>Wed, 22 Jun 2016 02:35:39 +0000</pubDate>
        <link>http://localhost:4000/2016-06-22-closing-general-session-moby-docks-cool-hacks/</link>
        <guid isPermaLink="true">http://localhost:4000/2016-06-22-closing-general-session-moby-docks-cool-hacks/</guid>
      </item>
    
      <item>
        <title>DockerCon 2016 D1 Keynote</title>
        <description>
          
          看点：开场乌龟引起了喵星人大战，首次有吉祥物开启的科技盛会。 和往常一样 CEO 和 CTO 挑大梁将首日 keynote。 所罗门提出了 Docker 技术发展的三个核心方向和着眼点，并在每个方向上做了新技术发布。 1. 开发者体验提升， 正式发布 Docker for Mac/Windws 2. 编排能力的提升，正式发布 Docker 1.12 ，其中有四项能力提升；这是要废掉所有其他编排器的节奏啊~ 3. 运维体验提升，正式发布 beta.docker.com ；这是和公有云深度结合的产品，分为 AWS 和 Azure 两个模块。 一共有三个实景演示，都没有出现问题，演示很成功。 现场录音 点上面的播放键，播放整场录音。请注意中间的数秒钟乃至数十秒的中断是正常，请快进收听。 开场 屏幕上出现了乌龟开始做 demo，运行了一个容器。 猫咪大战，混乱了，猫星人入侵了。猫叫~~乱作一团··· 发生了什么？ dockercon16 吹起了号角。 乌龟再次出现在电脑上，运行了另外一个容器惊喜，这次是美妙的音乐。 调皮的乌龟折腾完了之后，主题曲想起来。4000多人的场子，大家很期待。 CEO Ben Golub 演讲 Ben Golub CEO 出场。 Today...
        </description>
        <pubDate>Mon, 20 Jun 2016 19:30:33 +0000</pubDate>
        <link>http://localhost:4000/2016-06-20-dockercon-2016-d1-keynote/</link>
        <guid isPermaLink="true">http://localhost:4000/2016-06-20-dockercon-2016-d1-keynote/</guid>
      </item>
    
      <item>
        <title>下一代应用为中心的平台 OpenShift</title>
        <description>
          
          Amadeus uses next-generation containerized application platform with OpenShift from Martin on Vimeo.

以上视频来源于：https://blog.openshift.com/openshift-3-amadeus-red-hat-summit-session-recording-recap/


        </description>
        <pubDate>Tue, 12 Jan 2016 04:05:46 +0000</pubDate>
        <link>http://localhost:4000/2016-01-12-e4-b8-8b-e4-b8-80-e4-bb-a3-e5-ba-94-e7-94-a8-e4-b8-ba-e4-b8-ad-e5-bf-83-e7-9a-84-e5-b9-b3-e5-8f-b0-openshift/</link>
        <guid isPermaLink="true">http://localhost:4000/2016-01-12-e4-b8-8b-e4-b8-80-e4-bb-a3-e5-ba-94-e7-94-a8-e4-b8-ba-e4-b8-ad-e5-bf-83-e7-9a-84-e5-b9-b3-e5-8f-b0-openshift/</guid>
      </item>
    
      <item>
        <title>用 Jekyll + Github 建立静态站点</title>
        <description>
          
          新建库 建立一个用户名开头的库，如我的github用户名是 martinliu， 新建的库的名字为 martinliu.github.io ; 这个库将是存放web页面的。包括该域名下的站点的所有相关页码代码文件和相关css,图片等文件。 更新并上传新库 参考的命令如下： [bash] git clone https://github.com/martinliu/martinliu.github.io cd martinliu.github.io echo “Martin Liu’s Github Homepage” &amp;gt; index.html git add –all git commit -m “Initial commit” git push -u origin master [/bash] 打开浏览器测试你的网站，访问网址： http://martinliu.github.io ， 你已经可以看到你的初始化页码了。 Jekyll博客系统 Github网站上推荐使用Jekyll创建和管理这个博客系统。它是支持Markdown语法，不需要使用数据库，纯文本的静态网站和博客系统。使用它可以建立和管理一个风格美观，容易管理的网站，生成的网页可以上传到以上生成的网站库中。 安装Jekyll系统 我的测试系统：Fedora 23。操作步骤如下。 安装依赖的包和ruby环境 [bash] dnf install ruby ...
        </description>
        <pubDate>Sun, 10 Jan 2016 01:01:25 +0000</pubDate>
        <link>http://localhost:4000/2016-01-10-e7-94-a8-jekyll-github-e5-bb-ba-e7-ab-8b-e9-9d-99-e6-80-81-e7-ab-99-e7-82-b9/</link>
        <guid isPermaLink="true">http://localhost:4000/2016-01-10-e7-94-a8-jekyll-github-e5-bb-ba-e7-ab-8b-e9-9d-99-e6-80-81-e7-ab-99-e7-82-b9/</guid>
      </item>
    
      <item>
        <title>My Arduino Project status</title>
        <description>
          
          Source code on github

https://github.com/martinliu/ArduinoProjects

Project 2 SOS led

S.O.S LED device from Martin on Vimeo.

Project 2 blink led

Arduino Project 1 blink LED from Martin on Vimeo.

        </description>
        <pubDate>Mon, 04 Jan 2016 16:00:59 +0000</pubDate>
        <link>http://localhost:4000/2016-01-04-my-arduino-project-status/</link>
        <guid isPermaLink="true">http://localhost:4000/2016-01-04-my-arduino-project-status/</guid>
      </item>
    
      <item>
        <title>vimeo video sharing vs youku.com</title>
        <description>
          
          vimeo 的特别域名没想到还给我留着的 http://vimeo.com/martinliu 从国内访问和上传视频是有问题的，需要用vpn才能正常访问，vimeo能共享到Wordpress上的video是没有视频的，播放的时候稍微有点卡；就算是稍微卡一点，也比youku视频前后的广告好，以后计划转战vimeo发布视频了。

        </description>
        <pubDate>Fri, 01 Jan 2016 14:21:11 +0000</pubDate>
        <link>http://localhost:4000/2016-01-01-vimeo-video-sharing-vs-youku-com/</link>
        <guid isPermaLink="true">http://localhost:4000/2016-01-01-vimeo-video-sharing-vs-youku-com/</guid>
      </item>
    
      <item>
        <title>No Content Found</title>
        <description>
          
          重新整理了blog的菜单样式，增加了三列显示模式，发布了各种格式的post，觉得blog样式还是越简单看着越顺眼。

        </description>
        <pubDate>Tue, 29 Dec 2015 14:39:25 +0000</pubDate>
        <link>http://localhost:4000/2015-12-29-54083/</link>
        <guid isPermaLink="true">http://localhost:4000/2015-12-29-54083/</guid>
      </item>
    
      <item>
        <title>Nino Rota - Main Title (The Godfather Waltz)</title>
        <description>
          
          [wm_audio] [audio mp3=”http://cdn1.martinliu.cn/wp-content/uploads/2015/12/Nino-Rota-Main-Title-The-Godfather-Waltz.mp3”][/audio]

        </description>
        <pubDate>Tue, 29 Dec 2015 14:08:24 +0000</pubDate>
        <link>http://localhost:4000/2015-12-29-nino-rota-main-title-the-godfather-waltz/</link>
        <guid isPermaLink="true">http://localhost:4000/2015-12-29-nino-rota-main-title-the-godfather-waltz/</guid>
      </item>
    
  </channel>
</rss>
